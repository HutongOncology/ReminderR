,libPath()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
install.packages("ggplot2")
.libPaths()
install.packages("xgboost")
install.packages("xgboost")
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
install.packages("rlang", lib="D:/R/R-4.1.0/library")
install.packages("rlang", lib="D:/R/R-4.1.0/library")
.libPaths()
install.packages("rlang")
library(xgboost)
BiocManager::install("ComplexHeatmap")
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
BiocManager::install(version = "3.14")
install.packages("dynamicTreeCut")
install.packages("WGCNA")
source("https://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute","GO.db", "preprocessCore"))
install.packages(c("matrixStats", "Hmisc","foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival"))
install.packages(c("WGCNA", "stringr", "reshape2"))
library(WGCNA)
install.packages("WGCNA")
.libPaths()
.libPaths()
.libPaths()
library(WGCNA)
install.packages(c('NMF','circlize'))
devtools::install_github("sqjin/CellChat")
library(CellChat)
library(CellChat)
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'lme4', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'HDF5Array',
'terra', 'ggrastr'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("RCurl")
install.packages("C:/Users/Lenovo/Downloads/RCurl_1.98-1.16.zip", repos = NULL, type = "win.binary")
install.packages("igraph")
install.packages("igraph")
install.packages("C:/Users/Lenovo/Downloads/uwot_0.2.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Lenovo/Downloads/uwot_0.2.2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/igraph_2.0.3.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/leidenbase_0.1.30.zip", repos = NULL, type = "win.binary")
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("C:/Users/Lenovo/Downloads/monocle3-master.zip", repos = NULL, type = "win.binary")
library(monocle3-master)
library(RCurl)
library(uwet)
library(uwot)
library(leidenbase)
library(igraph)
install.packages("C:/Users/Lenovo/Downloads/RCurl_1.98-1.16.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/RCurl_1.98-1.16.zip", repos = NULL, type = "win.binary")
library(RCurl)
detach("package:RCurl", unload = TRUE)
remove.packages("RCurl")
install.packages("C:/Users/Lenovo/Downloads/RCurl_1.98-1.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Lenovo/Downloads/leidenbase_0.1.30.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/uwot_0.2.2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/igraph_2.0.3.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/RCurl_1.98-1.16.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lenovo/Downloads/monocle3_1.3.7.tar.gz", repos = NULL, type = "source")
library(monocle3)
library(monocle3)
install.packages("C:/Users/Lenovo/Downloads/igraph_2.0.3.zip", repos = NULL, type = "win.binary")
library(monocle3)
install.packages("C:/Users/Lenovo/Downloads/igraph_2.0.3.tar.gz", repos = NULL, type = "source")
install.packages("cpp11")
install.packages("C:/Users/Lenovo/Downloads/igraph_2.0.3.tar.gz", repos = NULL, type = "source")
install.packages("igraph")
library(monocle3)
install.packages("lme4")
library(monocle3)
library(monocle3)
library(monocle3)
file_path <- "D:\TCGA_Data\GDC"
file_path <- "D:/TCGA_Data/GDC"
counts_files <- list.files(path = file_path, pattern = ".svs", recursive = T, full.names = T)
head(counts_files)
counts_files <- counts_files %>% as.data.frame()
counts_files <- as.data.frame(counts_files)
View(counts_files)
write.csv(counts_files, "1.csv")
install.packages("jsonlite")
library(jsonlite)
# 假设 JSON 数据存储在文件 'data.json' 中
json_file <- "TCIA CPTAC Pathology Portal.json"
data <- fromJSON(json_file)  # 读取 JSON 文件并转换为 R 对象
View(data)
# 将数据转换为数据框
df <- as.data.frame(data)
# 查看数据框
print(df)
# 保存为 CSV 文件
write.csv(df, "output.csv", row.names = FALSE)
library(jsonlite)
# 假设 JSON 数据存储在文件 'data.json' 中
json_file <- "TCIA CPTAC Pathology Portal_LUAD.json"
data <- fromJSON(json_file)  # 读取 JSON 文件并转换为 R 对象
# 将数据转换为数据框
df <- as.data.frame(data)
# 查看数据框
print(df)
# 保存为 CSV 文件
write.csv(df, "CPTAC.TCIA_LUAD.csv", row.names = FALSE)
library(jsonlite)
# 假设 JSON 数据存储在文件 'data.json' 中
json_file <- "TCIA CPTAC Pathology Portal_All.json"
data <- fromJSON(json_file)  # 读取 JSON 文件并转换为 R 对象
# 将数据转换为数据框
df <- as.data.frame(data)
# 查看数据框
print(df)
# 保存为 CSV 文件
write.csv(df, "CPTAC.TCIA_All.csv", row.names = FALSE)
a <- read.csv("C:\Users\Lenovo\Desktop\工作簿1.csv")
a <- read.csv("C:/Users/Lenovo/Desktop/工作簿1.csv")
table(a)
devtools::create("ReminderR")
setwd("ReminderR")
devtools::document()
devtools::check()
devtools::install()
library(ReminderR)
set_bark_key("https://api.day.app/2q8W3SvWb4Fq5PH4toPMpe")
bark_notify("R Script Completed", "Your analysis has finished running")
devtools::build()
library(devtools)
install_github("HutongOncology/BarkReminder/ReminderR")
devtools::install_github("HutongOncology/ReminderR")
